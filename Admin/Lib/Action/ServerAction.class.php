<?php
/**
 * Class IndexAction
 * Desc: 服务器管理
 * User: liujx
 * Date: 2015-12-1
 */
class ServerAction extends CommAction
{
    public $title = '服务器信息列表';
    public $model = 'Server';
    public $strPk = 'unique';

    // 显示之前
    public function beforeIndex($model)
    {
        // 添加按钮信息
        $this->arrTopOperate = array_merge(array(
            'signin' => array(
                'title' => '导入数据',
                'other' => array('id' => 'importData')
            ),

            'sort' => array(
                'title' => '推荐排序',
                'other' => array('class' => 'm-sort'),
            ),
        ),
        $this->arrTopOperate);

        // 初始化赋值
        array_push($this->arrStatus, '维护');
        $model->arrAddTh['status']['value']    = $model->arrShowTh[5]['search']['value'] = $this->arrStatus;
        $model->arrAddTh['recommend']['value'] = $model->arrShowTh[4]['search']['value'] = $this->arrRecommend;

        // 平台商信息
        $model->arrAddTh['agentid']['value']    =
        $model->arrShowTh[2]['search']['value'] =
        $model->arrImport['agentid']['value']   = D('Agent')->field('id, cn_name')->findAll(array(
            'index'  => 'id',       // 数组索引
            'keyval' => 'cn_name',  // 值
        ));

        // 修改表单
        $model->arrEditTh = $model->arrAddTh;
        $model->arrEditTh[$this->strPk] = array('type' => 'hidden');
    }

    // 表格数据的处理(显示之前的处理)
    public function handleValue(&$arrData, $isAll = true)
    {
        array_push($this->arrStatus, '维护');
        if (false === $isAll) $arrData = array($arrData);

        $arrAids = array();
        foreach ($arrData as $val)$arrAids[] = $val['agentid'];
        // 查询数据
        $arrAgents = D('Agent')->where()->findAll(array(
            'index'  => 'id',
            'keyval' => 'cn_name',
            'id'     => array('in' => array_unique($arrAids))
        ));

        // 处理显示
        foreach ($arrData as &$mval)
        {
            $mval['createTime'] = date('Y-m-d H:i:s', $mval['createTime']);
            $mval['updateTime'] = date('Y-m-d H:i:s', $mval['updateTime']);
            $mval['open_time']  = date('Y-m-d H:i:s', $mval['open_time']);
            $mval['status']     = $this->showStatus($mval['status'], $this->arrStatus, $this->arrColor);
            $mval['agentid']    = $arrAgents[$mval['agentid']];
            $mval['recommend']  = $this->showStatus($mval['recommend'], $this->arrRecommend, $this->arrRcolor);
        }

        if (false === $isAll) $arrData = array_shift($arrData);
    }

    // 定义分配
    public function allotFluidContent($model)
    {
        $arrAllot = parent::allotFluidContent($model); // TODO: Change the autogenerated stub

        // 导入表单
        $arrAllot[0]['content']['importDiv'] = array(
            'class'   => 'isHide',
            'content' => $this->showForm($model->arrImport, 'importForm'),
        );

        // 排序表单
        $arrAllot[0]['content']['sortDiv'] = array(
            'class'   => 'isHide',
            'content' => '<div class="span4" style="margin:10px auto;">
                            <div>
                                <div class="alert alert-block">
                                    <button class="close" data-dismiss="alert" type="button">×</button>
                                    <strong>温馨提醒：</strong>
                                    <br/>
                                    拖动进行进行排序（勾选数据将取消推荐）.
                                </div>
                                <div class="todo">
                                    <form name="sortForm" method="post" id="sortForm">
                                        <ul class="todo-list ui-sortable m-sort-ul">
                                        </ul>
                                        <div style="margin:15px auto; clear:both"></div>
                                        <label class="sortForm_error m_error error" style="display:none">服务器繁忙,请稍候再试...</label>
                                    </form>
						        </div>
                            </div>
                        </div>',
        );
        return $arrAllot;
    }

    // 修改之前的处理
    public function beforeUpdate($model, &$str)
    {
        $model->isNew = isset($model->unique) && ! empty($model->unique) ? false : true;
        return true;
    }

    // 获取平台信息
    public function getLinkAge()
    {
        $intAid = get('id');        // 接收平台ID
        $arrMsg = $this->arrError;  // 定义错误信息
        if ( ! empty($intAid))
        {
            $arrAgent = M('agent')->where(array('id' => $intAid))->find();
            $arrMsg['msg'] = '平台信息不存在哦！';
            if ($arrAgent)
            {
                $arrMsg = $this->arrSuccess;
                $arrMsg['data'] = $arrAgent;
            }
        }

        $this->returnAjax($arrMsg);
    }

    // 获取排序信息
    public function getSort()
    {
        $arrMsg = $this->arrError;
        // 查询所有推荐信息
        $arrRecommend = M('Server')->where(array('recommend' => 1))->order('sort ASC')->select();
        if ($arrRecommend)
        {
            $strHtml      = '';
            foreach ($arrRecommend as $key => $value)
            {
                $strHtml .= "<li>
                    <span class=\"todo-actions\">
                        <a href=\"#\"><i class=\"icon-check-empty\"></i></a>
                        <input type=\"hidden\" name=\"sort[]\" value=\"{$value['unique']}\" />
                    </span>
                    <span class=\"desc\">{$value['serverName']}</span>
                    <span class=\"label label-success\">{$value['sort']}</span>
                </li>";
            }

            $arrMsg = $this->arrSuccess;
            $arrMsg['data'] = $strHtml;
        }

        $this->returnAjax($arrMsg);
    }

    // 设置排序信息
    public function setSort()
    {
        // 接收参数
        $arrSort = post('sort'); // 排序信息
        $arrHide = post('hide'); // 删除推荐信息

        // 验证数据的有效性
        $arrMsg = $this->arrError;
        if ($arrSort && is_array($arrSort))
        {
            $model = M($this->model);
            // 删除掉推荐信息
            if ($arrHide && is_array($arrHide))
                $model->where('`unique` IN ('.implode(',', $arrHide).')')->save(array('recommend' => 0));
            else
                $arrHide = array();

            // 重新排序
            $intSort = 1;
            foreach ($arrSort as $value)
            {
                if (in_array($value, $arrHide)) continue;
                $model->where(array('unique'=>(int)$value))->save(array('sort' => $intSort));
                $intSort ++;
            }

            // 判断是否成功
            if ($intSort >= 1)
                $arrMsg = $this->arrSuccess;
            else
                $arrMsg['msg'] = $this->strError;
        }

        // 响应AJAX
        $this->returnAjax($arrMsg);
    }

    // 导入数据
    public function import()
    {
        // 接收参数
        $agentid  = (int)post('agentid');        // 平台ID
        $dbhost   = post('mysqlHost');           // mySQL 地址
        $dbport   = post('mysqlPort');           // mySQL 端口
        $dbname   = post('mysqlName');           // mySQL 库名
        $dbuser   = post('mysqlUser');           // mySQL 用户名
        $dbpass   = post('mysqlPass');           // mySQL 密码
        $intStart = (int)post('serverStart');    // 开始服
        $intEnd   = (int)post('serverEnd');      // 结束服
        $isUser   = (bool)post('isUser');        // 是否导入用户数据

        // 判断数据的有效性
        $arrError = $this->arrError;
        if ($agentid && $dbhost && $dbuser && $dbpass && $dbname && $dbport)
        {
            $model  = D('Server');
            $umodel = D('Users');
            set_time_limit(0);
            try
            {
                // 连接数据库
                $db_link  = mysql_connect($dbhost, $dbuser, $dbpass) or die('数据库链接失败:'.mysql_error());
                mysql_set_charset('UTF8', $db_link);
                mysql_select_db($dbname, $db_link);

                // 查询条件
                $where    = array('`agentid` = '.$agentid);                                                                    // 平台ID
                if ( ! empty($intStart) && ! empty($intEnd)) $where[] = '(`id` BETWEEN '.$intStart. ' AND '.$intEnd.')';    // 开始服和结束服
                $strWhere = implode(' AND ', $where);

                // 开始查询数据
                $sql      = "SELECT * FROM `serverInfo` WHERE {$strWhere} ORDER BY `id` ASC";
                $result   = mysql_query($sql, $db_link);
                $data     = array();
                if ($result)
                {
                    while ($rows = mysql_fetch_assoc($result)) $data[] = $rows;
                    // 释放资源
                    mysqli_free_result($result);
                }

                // 关闭数据
                mysql_close($db_link);
                // 查询到数据
                if (! empty($data))
                {
                    // 开始新增数据
                    foreach ($data as $key => $value)
                    {
                        // 查询数据是否存在(存在不做处理)
                        $isTrue = $model->where(array(
                            'id'        => $value['id'],
                            'agentid'   => $agentid,
                            'projectId' => 1,
                        ))->find();

                        // 不存在添加数据
                        if ( ! $isTrue)
                        {
                            // 添加服务器数据信息
                            $isTrue = $model->add(array(
                                'id'         => $value['id'],
                                'projectId'  => 1,
                                'agentid'    => $agentid,
                                'serverName' => $value['serverName'],
                                'recommend'  => 0,
                                'status'     => $value['status'],
                                'open_time'  => $value['createtime'],
                                'mongoHost'  => $value['mysqlIP'],
                                'mongoPort'  => $value['mysqlPort'],
                                'mongoName'  => $value['mysqlDB'],
                            ));
                        }

                        // 链接mongo
                        if ($isTrue && $isUser)
                        {
                            try
                            {
                                $mongoConnect = 'mongodb://'.$value['mysqlIP'].':'.$value['mysqlPort'];
                                $mongo = new Mongo($mongoConnect);
                                $objDB = $mongo->selectDB($value['mysqlDB']);
                                if (is_object($objDB))
                                {
                                    // 查询数据
                                    $mongoresult = $objDB->useridinfo->find(array(
                                        'nOperatorId' => (int)$agentid,
                                        'nServerId'   => (int)$value['id'],
                                    ));

                                    if ($mongoresult)
                                    {
//                                        $intTime = time();
//                                        $strIp   = get_client_ip();
                                        // 定义新增用户的ID
                                        // $strInsert = 'INSERT INTO `gt_project_users` (`projectid`, `agentid`, `username`,`password`, `encrypt`, `suid`, `status`, `lastTime`, `lastIp`, `createTime`, `createId`, `updateTime`, `updateId`) VALUES ';
                                        foreach ($mongoresult as $val)
                                        {
                                            $umodel->add(array(
                                                'agentid'   => $agentid,
                                                'username'  => $val['sUserId'],
                                                'password'  => $val['sUserId'],
                                                'suid'      => $val['sUserId'],
                                            ));
                                        }
                                    }
                                }
                            }
                            catch (MongoConnectionException $e)
                            {
                                $arrError['msg'] = $e->getMessage();
                                $this->returnAjax($arrError);
                            }
                        }
                    }

                    $arrError = $this->arrSuccess;
                }
            }
            catch (Exception $e)
            {
                $arrError['msg'] = $e->getMessage();
            }
        }

        // 返回数据
        $this->returnAjax($arrError);
    }
}
?>