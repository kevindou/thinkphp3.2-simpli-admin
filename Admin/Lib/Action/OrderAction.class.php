<?php
/**
 * Class IndexAction
 * Desc: 后台用户订单列表
 * User: liujx
 * Date: 2015-11-30
 */
class OrderAction extends CommAction
{
    // 初始化定义
    public $title     = '订单信息';
    public $model     = 'Order';
    public $strSort   = 'createtime DESC';
    public $arrOperateButton = array(
        'trash'   => array('title' => '删除', 'other' => array('class' => 'btn btn-danger btn-delete')),
    );
    public $arrStatus = array('未支付', '支付成功', '订单完成');
    public $arrColor  = array('important', 'warning', 'success');

    // 显示之前处理
    public function beforeIndex($model)
    {
        // 注入排序信息
        $this->assign('arrParams', '{\'order\':[[8,\'desc\']]}');
        $model->arrShowTh[2]['search']['value'] = D('Agent')->field('id, cn_name')->findAll(array(
            'index'  => 'id',       // 数组索引
            'keyval' => 'cn_name',  // 值
        ));
        $model->arrShowTh[7]['search']['value'] = $this->arrStatus;
        unset($this->arrTopOperate['plus']);
        return parent::beforeIndex($model); // TODO: Change the autogenerated stub
    }

    // 表格数据的处理(显示之前的处理)
    public function handleValue(&$arrData, $isAll = true)
    {
        if (false === $isAll) $arrData = array($arrData);

        // 处理出平台和服务器信息
        $arrServer = array();
        foreach ($arrData as $val)
        {
            if ( ! isset($arrServer[$val['game_id']])) $arrServer[$val['game_id']] = array();
            $arrServer[$val['game_id']][] = $val['server_id'];
        }

        $arrAgents = $arrServers = array();
        // 有数据进行处理
        if (!empty($arrServer))
        {
            $arrAids  = array();
            $arrWhere = array();
            foreach($arrServer as $key => $val)
            {
                $arrAids[]  = $key;
                $strIn      = implode(',', array_unique($val));
                $arrWhere[] = "(`agentid` = {$key} AND `id` IN ({$strIn}))";
            }

            // 查询平台信息
            $arrAgents = D('Agent')->field('id, cn_name')->findAll(array(
                'index'  => 'id',
                'keyval' => 'cn_name',
                'id'     => array('in' => array_unique($arrAids))
            ));

            $arrServers = D('Server')->field('id, agentid, serverName')->where(implode(' OR ', $arrWhere))->findAll();
            if ($arrServers)
            {
                $tmpServer = array();
                foreach ($arrServers as $val)
                {
                    if ( ! isset($tmpServer[$val['agentid']])) $tmpServer[$val['agentid']] = array();
                    $tmpServer[$val['agentid']][$val['id']] = $val['serverName'];
                }

                $arrServers = $tmpServer;
            }
        }

        // 处理显示
        foreach ($arrData as &$mval)
        {
            $intAid = $mval['game_id'];
            $mval['createtime'] = date('Y-m-d H:i:s', $mval['createtime']);
            $mval['game_id']    = isset($arrAgents[$intAid]) ? $arrAgents[$intAid] : $mval['game_id'];
            $mval['server_id']  = isset($arrServers[$intAid][$mval['server_id']]) ? $arrServers[$intAid][$mval['server_id']] : $mval['server_id'];
            $mval['status']     = $this->showStatus($mval['status'], $this->arrStatus, $this->arrColor); // $this->arrStatus[$mval['status']];
        }

        if (false === $isAll) $arrData = array_shift($arrData);
    }

    // 分配主要显示内容
    public function allotFluidContent($model)
    {
        // 之前的处理
        $arrAllot = parent::allotFluidContent($model);
        array_pop($arrAllot);
        return $arrAllot;
    }

    // 订单统计功能
    public function count()
    {
        
        // 获取默认值
        $strToday   = date('Y-m-d');
        $intStart   = strtotime($strToday);

        // 进来默认查询今天所有的订单数据信息
        $arrDefault = $this->getCount('`createtime` >= '.$intStart);

        // 查询所有平台信息
        $arrAgents  =  D('Agent')->field('id, cn_name')->findAll(array(
            'index'  => 'id',           // 数组索引
            'keyval' => 'cn_name',      // 值
        ));

        // 默认注入统计信息
        $model = D($this->model);
        $this->isOperate = false;
        // 添加查询信息
        $model->arrShowTh[2]['search'] = array('type' => 'select', 'value' => $arrAgents, 'other' => array('id' => 'm-agentId'));
        $model->arrShowTh[3]['search'] = array('type' => 'select', 'value' => array(), 'other' => array('id' => 'm-serverId'));
        // 删除查询信息
        unset($model->arrShowTh[4]['search']);
        unset($model->arrShowTh[7]['search']);
        unset($model->arrShowTh[8]['search']);
        $this->assign($this->tableField($model));           // 显示表头信息(搜索和标题)
        $this->assign($arrDefault);     // 统计信息
        $this->assign(array(
            'agents' => $arrAgents,     // 平台信息
            'time'   => $strToday,      // 当前时间
        ));
        $this->display('count');
    }

    // 获取数据显示
    public function getCounts()
    {
        // 开始接收参数
        $model = D($this->model);

        // 处理查询条件
        $strWhere = $this->handleSearch();

        // 查询数据总条数
        $total = $model->where($strWhere)->count();

        // 处理排序
        $intSort  = (int)get('iSortCol_0');  // 排序字段
        $strOrder = get('sSortDir_0');       // 排序类型

        if ($strOrder)
        {
            $strSort = $model->arrShowTh[$intSort]['name'];
            $this->strSort = $strSort . ' ' .$strOrder;
        }

        // 分页查询
        $data  = $model->where($strWhere)->order($this->strSort)->limit($this->dataLimit())->select();
        if ($data)
        {
            // 添加按钮
            foreach ($data as $key => &$value)
            {
                if ($this->isOperate)
                {
                    $this->setOperate('zoom-in,edit,trash', 'vid', $value[$this->strPk]);
                    $value['operate'] = $this->showOperate($this->arrOperateButton);
                }
            }

            // 处理值
            $this->handleValue($data);
        }
        else
            $data = array();

        // 返回数据
        exit(json_encode(array(
            'sEcho'                 => $_GET['sEcho'],
            'iTotalRecords'         => count($data),
            'iTotalDisplayRecords'  => intval($total),
            'aaData'                => $data,
        )));
    }

    // 设置统计数据信息
    public function setCounts()
    {
        // 查询条件信息
        $strWhere = $this->handleSearch();

        // 返回数据信息
        $this->returnAjax($this->getCount($strWhere));
    }

    /**
     * getCount() 查询统计信息
     * @access private 
     * @param  string $strWhere 查询条件信息
     * @param  string $default  默认添加的查询条件
     * @return array  返回查询的数组信息
     */
    private function getCount($strWhere = '', $default = '`status` >= 1')
    {
        // 定义返回数据
        $arrReturn = array(
            'count' => 0,
            'money' => 0,
            'gold'  => 0,
        );

        // 默认添加查询条件
        if (! empty($strWhere)) $default = ' AND '.$default;
        
        // 查询数据
        $arrCount = M('Order')->field('COUNT(*) AS `count`, SUM(`money`) AS `money`, SUM(`amount`) AS `gold`')->where($strWhere.$default)->find();

        if ($arrCount) $arrReturn = $arrCount;

        // 处理空值问题
        foreach ($arrReturn as &$value) $value = intval($value);

        // 返回
        return $arrReturn;
    }

    /**
     * handleSearch() 处理查询
     * @access private
     * @param  string $default 默认查询条件 
     * @return array 返回数组
     */
    private function handleSearch($default = '`status` >= 1')
    {
        // 处理查询
        $arrWhere  = array($default);
        $intEcho   = get('sEcho');           // 第几次请求
        $strSearch = get('sSearch');         // 快速查询
        $intGid    = (int)get('sSearch_2');  // 平台查询
        $intSid    = (int)get('sSearch_3');  // 服务器查询
        $intStart  = get('sSearch_4');       // 开始时间
        $intEnd    = get('sSearch_5');       // 结束时间

        // 判断添加查询条件
        if ($intEcho == 1)       $arrWhere[] = '`createtime` >= '.strtotime(date('Y-m-d'));
        if (! empty($strSearch)) $arrWhere[] = "(`order_id` LIKE '%{$strSearch}%' OR `user` LIKE '%{$strSearch}%')";    // 判断like查询
        if ( ! empty($intGid))   $arrWhere[] = '`game_id` = '.$intGid;                                                  // 判断平台查询
        if ( ! empty($intSid))   $arrWhere[] = '`server_id` = '.$intSid;                                                // 判断服务器查询
        if ( ! empty($intStart)) $arrWhere[] = '`createtime` >= '.strtotime($intStart);                                 // 判断开始时间
        if ( ! empty($intEnd))   $arrWhere[] = '`createtime` <= '.strtotime($intEnd);                                   // 判断结束时间

        // 返回查询条件
        return implode(' AND ', $arrWhere);
    }
}
?>